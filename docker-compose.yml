
services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: akash
      POSTGRES_DB: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-app-network # Assign to the main network

  consul:
    image: consul:1.15
    command: agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my-app-network # Assign to the main network

  kong-migrations:
    image: kong:3.7
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: postgres
      KONG_PG_PASSWORD: akash
      KONG_PG_DATABASE: postgres
    networks:
      - my-app-network # Assign to the main network

  kong:
    image: kong:3.7
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: postgres
      KONG_PG_PASSWORD: akash
      KONG_PG_DATABASE: postgres
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - my-app-network # Assign to the main network

  user-services:
    build: ./services/users
    container_name: user-service
    environment:
      - SERVICE_NAME=user-service
      - SERVICE_PORT=5000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=akash
      - DB_NAME=postgres
    ports:
      - "5000:5000"
    # env_file:
    #   - services/users/.env.docker
    # command: sh -c "npx prisma migrate deploy --preview-feature && npm start"
    depends_on:
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be healthy
    networks:
      - my-app-network

  address-services:
    build: ./services/addresses
    container_name: address-service
    environment:
      - SERVICE_NAME=address-service
      - SERVICE_PORT=5001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=akash
      - DB_NAME=postgres
    ports:
      - "5001:5001"
    depends_on:
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be healthy
    networks:
      - my-app-network

  product-services:
    build: ./services/products
    container_name: product-service
    environment:
      - SERVICE_NAME=product-service
      - SERVICE_PORT=5002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=akash
      - DB_NAME=postgres
    ports:
      - "5002:5002"
    depends_on:
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be healthy
    networks:
      - my-app-network

  payment-services:
    build: ./services/payment
    container_name: payment-service
    environment:
      - SERVICE_NAME=payment-service
      - SERVICE_PORT=5003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=akash
      - DB_NAME=postgres
    ports:
      - "5003:5003"
    depends_on:
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be healthy
    networks:
      - my-app-network

  order-services:
    build: ./services/orders
    container_name: order-service
    environment:
      - SERVICE_NAME=order-service
      - SERVICE_PORT=5004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=akash
      - DB_NAME=postgres
    ports:
      - "5004:5004"
    depends_on:
      consul:
        condition: service_started
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy # Wait for RabbitMQ to be healthy
    networks:
      - my-app-network

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - my-app-network # Assign to the main network

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-app-network

networks:
  my-app-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  rabbitmq_data: